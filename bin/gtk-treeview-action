#!/usr/bin/env perl

use 5.12.0;
use strict;
use warnings;

use Carp;
use Devel::Comments;
use Gtk2 -init;

sub _create_model {
    my $model = Gtk2::TreeStore->new(qw/Glib::Scalar/);
    my $iterator = $model->append(undef);
    $model->set( $iterator, 0 => {
            url => 'http://localhost',
            label => 'my-label',
    });
    return $model;
}

use FindBin;
BEGIN { unshift @INC, "$FindBin::Bin/../lib" }

use App::PerlWatcher::Level qw/:levels/;
use App::PerlWatcher::UI::Gtk2::Utils qw/get_level_icon/;
use aliased 'App::PerlWatcher::UI::Gtk2::Widgets::CellRendererActivatablePixbuf' => 'CRAP';

my $window = Gtk2::Window->new ('toplevel');
my $button = Gtk2::Button->new ('Quit');
$button->signal_connect (clicked => sub { Gtk2->main_quit });

my $model = _create_model;
my $treeview = Gtk2::TreeView->new($model);
my $renderer = CRAP->new;
my $column = Gtk2::TreeViewColumn->new;
$column->pack_start( $renderer, 0 );
$treeview->append_column($column);
$column->set_cell_data_func(
    $renderer,
    sub {
        my ( $column, $cell, $model, $iter, $func_data ) = @_;
        my $value = $model->get_value( $iter, 0 );
        #$cell->set( text => $value->{label} );
        my $pixbuff = get_level_icon(LEVEL_NOTICE, 1);
        $cell->set(pixbuf => $pixbuff)
    }
);
$renderer->signal_connect("activated" => sub {
        ### got signal!
        my ($cell, $path) = @_;
        ### @_
});


$window->add ($treeview);

$window->show_all;



Gtk2->main;

1;

